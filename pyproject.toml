[tool.poetry]
name = "mediathequeroubaix"
version = "1.3.0"
description = "Client for the library of Roubaix (Médiathèque Roubaix)"
authors = [
    "Thomas Queste <tom@tomsquest.com>",
]
license = "MIT"
readme = "README.md"
documentation = "https://github.com/tomsquest/mediathequeroubaix.py"
homepage = "https://tomsquest.github.io/mediathequeroubaix.py"
repository = "https://github.com/tomsquest/mediathequeroubaix.py"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Typing :: Typed",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
]
packages = [
    { include = "mediathequeroubaix", from = "src" }
]

[tool.poetry.scripts]
mediathequeroubaix = "mediathequeroubaix.app:app"

[tool.poetry.dependencies]
python = "3.10.*"
requests = "^2.28.1"
pydantic = "^1.10.2"
returns = "^0.19.0"
rich = "^12.6.0"
typer = {extras = ["all"], version = "^0.7.0"}

[tool.poetry.group.dev.dependencies]
autoflake = "*"
black = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-debugger = "*"
flake8-eradicate = "*"
flake8-logging-format = "*"
flake8-pyprojecttoml = "*"
flake8-pytest-style = "*"
isort = "*"
# Force version of mypy to the one of Results to avoid weird errors
mypy = "^0.950"
pep8-naming = "*"
pre-commit = "*"
pytest = "*"
pytest-cov = "*"
pytest-github-actions-annotate-failures = "*"
python-kacl = "*"
pyupgrade = "*"
requests-mock = "^1.10.0"
tryceratops = "*"
types-requests = "^2.28.11.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
quiet = true

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
plugins = ['returns.contrib.mypy.returns_plugin', 'pydantic.mypy']
disallow_any_unimported = true
enable_error_code = ['truthy-bool', 'redundant-expr', 'unused-awaitable']
local_partial_types = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_unreachable = true

[tool.flake8]
ignore = [
    # Line break occurred before a binary operator (W503)
    # https://github.com/psf/black/issues/52
    "W503",
    # Line too long (E501)
    # 1. black does not format comments
    #    https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html#comments
    # 2. long links in doc strings are an issue
    "E501",
    # flake8-builtins
    # the likelihood of running into an issue when shadowing a builtin
    # with a class attribute is very low
    "A003",
    # flake8-bugbear
    # fastapi recommends to use `Depend()` as an argument default.
    # Unfortuantely, exceptions are hardcoded in bugbear.
    # https://github.com/PyCQA/flake8-bugbear/issues/62
    "B008",
]
# pep8-naming
classmethod-decorators = [
    "classmethod",      # built-in
    "validator",        # pydantic
    "root_validator",   # pydantic
]
enable-extensions= [
    "G",  # flake8-logging-format
]
per-file-ignores = [
    "*/__init__.py: F401"  # star imports in `__init__.py` files are ok
]
# Enables maccabe complexity checks
max-complexity = 10
exclude = [".git","__pycache__","old","build","dist",".venv",".eggs",".tox"]
